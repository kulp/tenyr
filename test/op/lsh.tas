C <- [P + (@=args + 0)]
D <- [P + (@=args + 1)]

D <- D & 63

// passing until proven broken
B <- -1

// test type 0
I <- C
J <- D
F <- 63
loop0:
N <- F == 0
P <- @+done0 & N + P
F <- F - 1

// stop decrementing J when it reaches 0
M <- J == 0
J <- J - 1
J <- J &~ M

E <- I + I
G <- E &~ M
H <- I & M
I <- G + H
// loop for a predictable number of instructions, to help hardware testing
P <- @+loop0 + P

done0:
J <- C << D
I <- I == J
B <- B & I

// test type 1
I <- C
J <- 23
F <- 63
loop1:
N <- F == 0
P <- @+done1 & N + P
F <- F - 1

// stop decrementing J when it reaches 0
M <- J == 0
J <- J - 1
J <- J &~ M

E <- I + I
G <- E &~ M
H <- I & M
I <- G + H
// loop for a predictable number of instructions, to help hardware testing
P <- @+loop1 + P

done1:
J <- C << 23
I <- I == J
B <- B & I

// test type 2
I <- -234
J <- D
F <- 63
loop2:
N <- F == 0
P <- @+done2 & N + P
F <- F - 1

// stop decrementing J when it reaches 0
M <- J == 0
J <- J - 1
J <- J &~ M

E <- I + I
G <- E &~ M
H <- I & M
I <- G + H
// loop for a predictable number of instructions, to help hardware testing
P <- @+loop2 + P

done2:
J <- -234 << D
I <- I == J
B <- B & I

illegal

