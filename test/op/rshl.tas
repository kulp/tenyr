C <- [(@args + (0 + 0x1000))]
D <- [(@args + (1 + 0x1000))]
D <- D & 31 # overshifting is tested separately

# passing until proven broken
B <- -1

# test type 0
E <- 0
M <- 0
loop0:
F <- @+masks + E + P
G <- [F]        # G is output mask
H <- [F + D]    # H is input mask
I <- C & H
I <- I == 0
I <- ~ I
I <- I & G
M <- M | I
O <- 32 - D
E <- E + 1
N <- E < O
P <- @+loop0 & N + P

I <- C >>> D
I <- I == M
B <- B & I

# test type 1
E <- 0
M <- 0
loop1:
F <- @+masks + E + P
G <- [F]        # G is output mask
H <- [F + 12]   # H is input mask
I <- C & H
I <- I == 0
I <- ~ I
I <- I & G
M <- M | I
O <- (32 - 12)
E <- E + 1
N <- E < O
P <- @+loop1 & N + P

I <- C >>> 12
I <- I == M
B <- B & I

# test type 2
E <- 0
M <- 0
loop2:
F <- @+masks + E + P
G <- [F]        # G is output mask
H <- [F + D]    # H is input mask
I <- -234 & H
I <- I == 0
I <- ~ I
I <- I & G
M <- M | I
O <- 32 - D
E <- E + 1
N <- E < O
P <- @+loop2 & N + P

I <- -234 >>> D
I <- I == M
B <- B & I

illegal

masks:
.word (1 << 0),
      (1 << 1),
      (1 << 2),
      (1 << 3),
      (1 << 4),
      (1 << 5),
      (1 << 6),
      (1 << 7),
      (1 << 8),
      (1 << 9),
      (1 << 10),
      (1 << 11),
      (1 << 12),
      (1 << 13),
      (1 << 14),
      (1 << 15),
      (1 << 16),
      (1 << 17),
      (1 << 18),
      (1 << 19),
      (1 << 20),
      (1 << 21),
      (1 << 22),
      (1 << 23),
      (1 << 24),
      (1 << 25),
      (1 << 26),
      (1 << 27),
      (1 << 28),
      (1 << 29),
      (1 << 30),
      (1 << 31)

