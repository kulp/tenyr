dist: bionic
addons: &def_addons
  artifacts:
    paths:
      - $(ls -1 $(make showbuilddir)/*.{gz,zip} | tr "\n" :)
      - $(find . -name 'core.*' -o -name 'core' | tr "\n" :)
    target_paths:
      - build/$TRAVIS_BUILD_NUMBER/$TRAVIS_JOB_NUMBER
      - version/$(git describe --always --tags --match 'v?.?.?*' $TRAVIS_COMMIT)
env:
  global:
    - MAKEFLAGS=e
    - DEPSSRC=$HOME/local
    - C_INCLUDE_PATH=$DEPSSRC/include
    - LIBRARY_PATH=$DEPSSRC/lib
    - LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$LIBRARY_PATH"
    - LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$DEPSSRC/lib/x86_64-linux-gnu"
    - PATH="$PATH:$DEPSSRC/bin"
matrix:
  include:
    - compiler: x86_64-w64-mingw32-gcc
      language: c
      sudo: required
      os: linux
      env:
        - PLATFORM=mingw BITS=64 HOST=x86_64
        - CHECK_RULE=check_sw GCOV=  JIT=0 SDL=0
        - PKG_RULE=zip
      addons:
        <<: *def_addons
        apt:
          packages:
            - gcc-mingw-w64-x86-64
            - wine64
            - wine-stable
    - compiler: i686-w64-mingw32-gcc
      language: c
      sudo: required
      os: linux
      env:
        - PLATFORM=mingw BITS=32 HOST=i686
        - CHECK_RULE=check_sw GCOV=  JIT=0 SDL=0
        - PKG_RULE=zip
      addons:
        <<: *def_addons
        apt:
          packages:
            - gcc-mingw-w64-i686
            - wine32
            - wine-stable
    - compiler: "clang"
      language: c
      os: osx
      env:
        - PLATFORM=osx   BITS=64 HOST=x86_64
        - CHECK_RULE=check_sw GCOV=       SDL=0
        - PKG_RULE=gzip
    - compiler: "gcc"
      language: c
      os: osx
      env:
        - PLATFORM=osx   BITS=64 HOST=x86_64
        - CHECK_RULE=check_sw GCOV=       SDL=0
        - PKG_RULE=gzip
    - compiler: "gcc"
      language: c
      os: linux
      arch: arm64
      env:
        - PLATFORM=linux BITS=64
        - CHECK_RULE=check_sw GCOV=       SDL=0
        - PKG_RULE=gzip
    - compiler: "clang"
      language: c
      os: linux
      env:
        - PLATFORM=linux BITS=64 HOST=x86_64
        - CHECK_RULE=check_sw GCOV=
        - PKG_RULE=gzip
        - SANITIZE=address
        - ASAN_OPTIONS=detect_leaks=0 # TODO enable leak detection by removing this line
      addons:
        <<: *def_addons
        apt:
          packages:
            - libsdl2-dev
            - libsdl2-image-dev
    - compiler: "clang"
      language: c
      os: linux
      env:
        - PLATFORM=linux BITS=64 HOST=x86_64
        - CHECK_RULE=check GCOV=
        - PKG_RULE=gzip
      addons:
        <<: *def_addons
        apt:
          packages:
            - libsdl2-dev
            - libsdl2-image-dev
            - iverilog
    - compiler: "gcc"
      language: c
      os: linux
      env:
        - PLATFORM=linux BITS=64 HOST=x86_64
        # TODO do `check` or `check_hw` here too, not just `check_sw` (as part of `coverage`)
        - CHECK_RULE=coverage GCOV=1
        - PKG_RULE=gzip
        - COVERITY_SCAN_PROJECT_NAME="$TRAVIS_REPO_SLUG"
        - COVERITY_SCAN_BRANCH_PATTERN="coverity_scan"
        - COVERITY_SCAN_NOTIFICATION_EMAIL="coverity@tenyr.info"
        - COVERITY_SCAN_BUILD_COMMAND="make V=1 all vpi"
      addons:
        <<: *def_addons
        apt:
          packages:
            - lcov
            - libsdl2-dev
            - libsdl2-image-dev
            - iverilog
    - compiler: "gcc"
      language: c
      os: linux
      arch: ppc64le
      env:
        - PLATFORM=linux BITS=64
        - CHECK_RULE=check_sw GCOV=       SDL=0
        - PKG_RULE=gzip
    - compiler: "gcc"
      language: c
      os: linux
      arch: s390x
      env:
        - PLATFORM=linux BITS=64
        - CHECK_RULE=check_sw GCOV=       SDL=0
        - PKG_RULE=gzip
    - language: node_js
      node_js:
        - node
      env:
        - PLATFORM=emscripten
        - CHECK_RULE=check_sw GCOV= JIT=0 SDL=0
        - PKG_RULE=gzip
      sudo: required
      services:
        - docker
      before_install:
        - docker run -dit --name emscripten -v $(pwd):/src trzeci/emscripten:sdk-tag-1.38.46-64bit bash
      script:
        - make PLATFORM=emscripten SDL=0 JIT=0 NODEPS lexer.c parser.c
        - docker exec -it emscripten make V=1 all PLATFORM=$PLATFORM JIT=$JIT SDL=$SDL NDEBUG=$NDEBUG
        - docker exec -it emscripten make V=1 $CHECK_RULE PLATFORM=$PLATFORM JIT=$JIT SDL=$SDL NDEBUG=$NDEBUG
sudo: false
before_script:
  - mkdir -p $DEPSSRC
  - if [[ $JIT != 0 ]] ; then ./scripts/build-lightning.sh 2.1.3 $DEPSSRC ; fi
  - . scripts/install_sdl.sh
  - if [[ $PLATFORM = mingw ]] ; then sed "s#{{{}}}#z:$(echo $PWD/3rdparty/sdl2/$HOST-w64-mingw32/bin | sed 's#/#\\\\\\\\#g')#" scripts/winepath.reg > scripts/winepath2.reg ; wine regedit scripts/winepath2.reg ; fi
  - if [[ $TRAVIS_OS_NAME = osx ]] ; then brew install bison ; BISONS=(/usr/local/Cellar/bison/*/bin/bison) ; export BISON="${BISONS[${#BISONS[@]}-1]}" ; fi
  # implement Coverity Scan with before_script instead of addons.coverity_scan
  # to work around too-early quota check by the coverity_scan addon
  - if [[ -n $COVERITY_SCAN_PROJECT_NAME ]] ; then curl -s 'https://scan.coverity.com/scripts/travisci_build_coverity_scan.sh' | bash || true ; fi
script:
  - make V=1 all
  - make $CHECK_RULE
  - make local-install
  - make $PKG_RULE
after_success:
  - |
    if [[ -n $GCOV ]] ; then
        bash <(curl -s https://codecov.io/bash) -f $(make showbuilddir)/coverage.info.src -f $(make showbuilddir)/coverage.info.vpi
    fi
notifications:
  irc:
    channels:
      - "irc.freenode.org#tenyr"
    use_notice: true
    skip_join: true
