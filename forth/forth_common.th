#ifndef FORTH_COMMON_TH_
#define FORTH_COMMON_TH_

// Baby ITC Forth
// Forth's  W   is in M
//          X   is in K
//          I   is in I
//          S   is in D
//          R   is in J
// alternate (C) stack is in O
// temporaries : B C E G H L N

#define W   M
#define X   K
#define I   I
#define S   D
#define R   J

#define T0  B
#define T1  C
#define T2  E
#define T3  F
#define T4  G
#define T5  H
#define T6  L
#define T7  N

#include "push.th"

// save and restore Forth registers on a stack, for calling other ABIs
#define pushregs(o) pushall_(o,W,X,I,S,R)
#define  popregs(o)  popall_(o,W,X,I,S,R)

#define jmp(Reg)    p <- Reg - (. + 1) + p
#define ccpre()     o <- R - 1 ; pushregs(o)
#define ccall(Loc)  push(o,p + 2); goto(Loc)
#define ccpost()    popregs(o)

#define reloc(Label)        @+Label + p
#define rel(X)              X + reloc(__zero)
#define unrel(X)            X - p + (. + 1)
#define goto(Label)         p <- reloc(Label)
#define push(Sp,Expr)       [Sp] <- Expr ; Sp <- Sp - 1
#define pop(Sp,Reg)         Sp <- Sp + 1 ; Reg <- [Sp]

#define iftrue(Predicate,Target) \
    p <- Predicate & reloc(Target)

#define iffalse(Predicate,Target) \
    p <- Predicate & 1 + p ; \
    goto(Target)

// TODO reorder fields so that an execution token and a @SYMBOL are the same
// thing. This probably implies that the link field and the length go after the
// name, possibly directly before the code.
#define headstr(Label,Name)                                     \
    .word (.L##Label##_end-.L##Label##_start) ; /* offset -1 */ \
    .global Label                             ;                 \
.L##Label##_start:                                              \
    .word @link                               ; /* offset  0 */ \
    .set link, (. - 1)                        ;                 \
    .set    L##Label##_compile, 0             ; /* offset  1 */ \
    .word  @L##Label##_compile                ;                 \
    .set    L##Label##_compile, 0             ;                 \
    .chars Name                               ; /* offset  2 */ \
.L##Label##_end: Label

#define compile(Label)                          \
    .word 0xcccccccc                          ; \
    .set L##Label##_compile, .                ; \
.L##Label##_compile_

#define head(Label,Name) \
    headstr(Label,#Name)

// expects to be called in a @word context
// TODO make Else implicit
#define IFNOT0(Then,Else)             \
    @EQZ,               /* nrmlise */ \
    @LITERAL, @Else,    /* F a1    */ \
    @SWAP, @DUP, @ROT,  /* F F a1  */ \
    @AND,               /* F a1    */ \
    @LITERAL, @Then,    /* F a1 a2 */ \
    @ROT, @EQZ, @AND,   /* a1 a2   */ \
    @OR,                /* a       */ \
    @RELOC, @SET_IP

// expects to be called in a @word context
#define GOTO(Where) \
    @LITERAL, @Where, @RELOC, @SET_IP

#endif

/* vi:set syntax=cpp et ts=4 sw=4: */

